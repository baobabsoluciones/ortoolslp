/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: .\ortools\linear_solver\go\linear_solver.i

package ortoolslp

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef long long swig_type_5;
typedef long long swig_type_6;
typedef long long swig_type_7;
typedef long long swig_type_8;
typedef long long swig_type_9;
typedef long long swig_type_10;
typedef long long swig_type_11;
typedef long long swig_type_12;
typedef long long swig_type_13;
typedef long long swig_type_14;
typedef long long swig_type_15;
typedef long long swig_type_16;
typedef _gostring_ swig_type_17;
typedef _gostring_ swig_type_18;
typedef _gostring_ swig_type_19;
typedef _gostring_ swig_type_20;
typedef _gostring_ swig_type_21;
typedef _gostring_ swig_type_22;
typedef _gostring_ swig_type_23;
typedef _gostring_ swig_type_24;
typedef _gostring_ swig_type_25;
typedef _gostring_ swig_type_26;
typedef _gostring_ swig_type_27;
typedef _gostring_ swig_type_28;
typedef _gostring_ swig_type_29;
typedef long long swig_type_30;
typedef long long swig_type_31;
typedef long long swig_type_32;
typedef long long swig_type_33;
typedef _gostring_ swig_type_34;
typedef _gostring_ swig_type_35;
typedef _gostring_ swig_type_36;
typedef _gostring_ swig_type_37;
typedef _gostring_ swig_type_38;
typedef _gostring_ swig_type_39;
extern void _wrap_Swig_free_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_linear_solver_300787661ba17a28(swig_intgo arg1);
extern uintptr_t _wrap_new_IntVector__SWIG_0_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_IntVector__SWIG_1_linear_solver_300787661ba17a28(swig_type_1 arg1);
extern uintptr_t _wrap_new_IntVector__SWIG_2_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_2 _wrap_IntVector_size_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_3 _wrap_IntVector_capacity_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_IntVector_reserve_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_4 arg2);
extern _Bool _wrap_IntVector_isEmpty_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_IntVector_clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_IntVector_add_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_IntVector_get_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_IntVector_set_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern void _wrap_delete_IntVector_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_new_Float32Vector__SWIG_0_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_Float32Vector__SWIG_1_linear_solver_300787661ba17a28(swig_type_5 arg1);
extern uintptr_t _wrap_new_Float32Vector__SWIG_2_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_6 _wrap_Float32Vector_size_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_7 _wrap_Float32Vector_capacity_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float32Vector_reserve_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_8 arg2);
extern _Bool _wrap_Float32Vector_isEmpty_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float32Vector_clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float32Vector_add_linear_solver_300787661ba17a28(uintptr_t arg1, float arg2);
extern float _wrap_Float32Vector_get_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_Float32Vector_set_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, float arg3);
extern void _wrap_delete_Float32Vector_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_new_Float64Vector__SWIG_0_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_Float64Vector__SWIG_1_linear_solver_300787661ba17a28(swig_type_9 arg1);
extern uintptr_t _wrap_new_Float64Vector__SWIG_2_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_10 _wrap_Float64Vector_size_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_11 _wrap_Float64Vector_capacity_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float64Vector_reserve_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_12 arg2);
extern _Bool _wrap_Float64Vector_isEmpty_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float64Vector_clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Float64Vector_add_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2);
extern double _wrap_Float64Vector_get_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_Float64Vector_set_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, double arg3);
extern void _wrap_delete_Float64Vector_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_new_StringVector__SWIG_0_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_StringVector__SWIG_1_linear_solver_300787661ba17a28(swig_type_13 arg1);
extern uintptr_t _wrap_new_StringVector__SWIG_2_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_14 _wrap_StringVector_size_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_15 _wrap_StringVector_capacity_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_StringVector_reserve_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_16 arg2);
extern _Bool _wrap_StringVector_isEmpty_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_StringVector_clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_StringVector_add_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_17 arg2);
extern swig_type_18 _wrap_StringVector_get_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_StringVector_set_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, swig_type_19 arg3);
extern void _wrap_delete_StringVector_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_CLP_LINEAR_PROGRAMMING_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_GLOP_LINEAR_PROGRAMMING_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_CBC_MIXED_INTEGER_PROGRAMMING_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_BOP_INTEGER_PROGRAMMING_Solver_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_Solver_linear_solver_300787661ba17a28(swig_type_20 arg1, swig_intgo arg2);
extern void _wrap_delete_Solver_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Solver_SupportsProblemType_linear_solver_300787661ba17a28(swig_intgo arg1);
extern void _wrap_Solver_Clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_Solver_NumVariables_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Solver_variables_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Solver_LookupVariable_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_21 arg2);
extern uintptr_t _wrap_Solver_Var_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3, _Bool arg4, swig_type_22 arg5);
extern uintptr_t _wrap_Solver_NumVar_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3, swig_type_23 arg4);
extern uintptr_t _wrap_Solver_IntVar_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3, swig_type_24 arg4);
extern uintptr_t _wrap_Solver_BoolVar_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_25 arg2);
extern swig_intgo _wrap_Solver_NumConstraints_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Solver_constraints_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Solver_LookupConstraint_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_26 arg2);
extern uintptr_t _wrap_Solver_Constraint__SWIG_0_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3);
extern uintptr_t _wrap_Solver_Constraint__SWIG_1_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_Solver_Constraint__SWIG_2_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3, swig_type_27 arg4);
extern uintptr_t _wrap_Solver_Constraint__SWIG_3_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_28 arg2);
extern uintptr_t _wrap_Solver_Objective_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_OPTIMAL_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_FEASIBLE_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_INFEASIBLE_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_UNBOUNDED_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_ABNORMAL_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_NOT_SOLVED_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_Solver_Solve__SWIG_0_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_Solver_Solve__SWIG_1_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_Solver_ComputeConstraintActivities_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Solver_VerifySolution_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, _Bool arg3);
extern _Bool _wrap_Solver_InterruptSolve_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Solver_FillSolutionResponseProto_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_Solver_SolveWithProto_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_Solver_ExportModelToProto_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_Solver_LoadSolutionFromProto__SWIG_0_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2, double arg3);
extern uintptr_t _wrap_Solver_LoadSolutionFromProto__SWIG_1_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern _Bool _wrap_Solver_SetSolverSpecificParametersAsString_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_29 arg2);
extern swig_intgo _wrap_FREE_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_AT_LOWER_BOUND_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_AT_UPPER_BOUND_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_FIXED_VALUE_Solver_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_BASIC_Solver_linear_solver_300787661ba17a28(void);
extern double _wrap_Solver_infinity_linear_solver_300787661ba17a28(void);
extern void _wrap_Solver_EnableOutput_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Solver_SuppressOutput_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_30 _wrap_Solver_iterations_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_31 _wrap_Solver_nodes_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Solver_ComputeExactConditionNumber_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Solver_NextSolution_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Solver_set_time_limit_linear_solver_300787661ba17a28(uintptr_t arg1, swig_type_32 arg2);
extern swig_type_33 _wrap_Solver_wall_time_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Objective_Clear_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Objective_SetCoefficient_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2, double arg3);
extern double _wrap_Objective_GetCoefficient_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_Objective_SetOffset_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2);
extern double _wrap_Objective_offset_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Objective_SetOptimizationDirection_linear_solver_300787661ba17a28(uintptr_t arg1, _Bool arg2);
extern void _wrap_Objective_SetMinimization_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Objective_SetMaximization_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Objective_maximization_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Objective_minimization_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Objective_Value_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Objective_BestBound_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_delete_Objective_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_34 _wrap_Variable_name_linear_solver_300787661ba17a28(uintptr_t arg1);
extern _Bool _wrap_Variable_integer_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Variable_solution_value_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_Variable_index_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Variable_lb_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Variable_ub_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Variable_SetBounds_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3);
extern double _wrap_Variable_reduced_cost_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_Variable_basis_status_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_delete_Variable_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_35 _wrap_Constraint_name_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Constraint_SetCoefficient_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2, double arg3);
extern double _wrap_Constraint_GetCoefficient_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern double _wrap_Constraint_lb_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Constraint_ub_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_Constraint_SetBounds_linear_solver_300787661ba17a28(uintptr_t arg1, double arg2, double arg3);
extern void _wrap_Constraint_set_is_lazy_linear_solver_300787661ba17a28(uintptr_t arg1, _Bool arg2);
extern swig_intgo _wrap_Constraint_index_linear_solver_300787661ba17a28(uintptr_t arg1);
extern double _wrap_Constraint_dual_value_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_Constraint_basis_status_linear_solver_300787661ba17a28(uintptr_t arg1);
extern void _wrap_delete_Constraint_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_intgo _wrap_RELATIVE_MIP_GAP_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_PRIMAL_TOLERANCE_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_DUAL_TOLERANCE_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_PRESOLVE_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_LP_ALGORITHM_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_INCREMENTALITY_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_SCALING_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_PRESOLVE_OFF_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_PRESOLVE_ON_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_DUAL_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_PRIMAL_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_BARRIER_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_INCREMENTALITY_OFF_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_INCREMENTALITY_ON_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_SCALING_OFF_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_SCALING_ON_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern double _wrap_MPSolverParameters_kDefaultRelativeMipGap_get_linear_solver_300787661ba17a28(void);
extern double _wrap_MPSolverParameters_kDefaultPrimalTolerance_get_linear_solver_300787661ba17a28(void);
extern double _wrap_MPSolverParameters_kDefaultDualTolerance_get_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_MPSolverParameters_kDefaultPresolve_get_linear_solver_300787661ba17a28(void);
extern swig_intgo _wrap_MPSolverParameters_kDefaultIncrementality_get_linear_solver_300787661ba17a28(void);
extern uintptr_t _wrap_new_MPSolverParameters_linear_solver_300787661ba17a28(void);
extern void _wrap_MPSolverParameters_SetDoubleParam_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, double arg3);
extern void _wrap_MPSolverParameters_SetIntegerParam_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern double _wrap_MPSolverParameters_GetDoubleParam_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_MPSolverParameters_GetIntegerParam_linear_solver_300787661ba17a28(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_delete_MPSolverParameters_linear_solver_300787661ba17a28(uintptr_t arg1);
extern uintptr_t _wrap_new_ModelExportOptions_linear_solver_300787661ba17a28(void);
extern void _wrap_delete_ModelExportOptions_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_36 _wrap_ExportModelAsLpFormat__SWIG_0_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern swig_type_37 _wrap_ExportModelAsLpFormat__SWIG_1_linear_solver_300787661ba17a28(uintptr_t arg1);
extern swig_type_38 _wrap_ExportModelAsMpsFormat__SWIG_0_linear_solver_300787661ba17a28(uintptr_t arg1, uintptr_t arg2);
extern swig_type_39 _wrap_ExportModelAsMpsFormat__SWIG_1_linear_solver_300787661ba17a28(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"

type _ unsafe.Pointer

var Swig_escape_always_false bool
var Swig_escape_val interface{}

type _swig_fnptr *byte
type _swig_memberptr *byte

type _ sync.Mutex

type swig_gostring struct {
	p uintptr
	n int
}

func swigCopyString(s string) string {
	p := *(*swig_gostring)(unsafe.Pointer(&s))
	r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
	Swig_free(p.p)
	return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_linear_solver_300787661ba17a28(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrIntVector uintptr

func (p SwigcptrIntVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrIntVector) SwigIsIntVector() {
}

func NewIntVector__SWIG_0() (_swig_ret IntVector) {
	var swig_r IntVector
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_0_linear_solver_300787661ba17a28()))
	return swig_r
}

func NewIntVector__SWIG_1(arg1 int64) (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_1_linear_solver_300787661ba17a28(C.swig_type_1(_swig_i_0))))
	return swig_r
}

func NewIntVector__SWIG_2(arg1 IntVector) (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_2_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewIntVector(a ...interface{}) IntVector {
	argc := len(a)
	if argc == 0 {
		return NewIntVector__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewIntVector__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewIntVector__SWIG_2(a[0].(IntVector))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrIntVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_IntVector_size_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_IntVector_capacity_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_IntVector_reserve_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_type_4(_swig_i_1))
}

func (arg1 SwigcptrIntVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_IntVector_isEmpty_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_IntVector_clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrIntVector) Add(arg2 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_IntVector_add_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrIntVector) Get(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_IntVector_get_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Set(arg2 int, arg3 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_IntVector_set_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2))
}

func DeleteIntVector(arg1 IntVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_IntVector_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type IntVector interface {
	Swigcptr() uintptr
	SwigIsIntVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 int)
	Get(arg2 int) (_swig_ret int)
	Set(arg2 int, arg3 int)
}

type SwigcptrFloat32Vector uintptr

func (p SwigcptrFloat32Vector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFloat32Vector) SwigIsFloat32Vector() {
}

func NewFloat32Vector__SWIG_0() (_swig_ret Float32Vector) {
	var swig_r Float32Vector
	swig_r = (Float32Vector)(SwigcptrFloat32Vector(C._wrap_new_Float32Vector__SWIG_0_linear_solver_300787661ba17a28()))
	return swig_r
}

func NewFloat32Vector__SWIG_1(arg1 int64) (_swig_ret Float32Vector) {
	var swig_r Float32Vector
	_swig_i_0 := arg1
	swig_r = (Float32Vector)(SwigcptrFloat32Vector(C._wrap_new_Float32Vector__SWIG_1_linear_solver_300787661ba17a28(C.swig_type_5(_swig_i_0))))
	return swig_r
}

func NewFloat32Vector__SWIG_2(arg1 Float32Vector) (_swig_ret Float32Vector) {
	var swig_r Float32Vector
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (Float32Vector)(SwigcptrFloat32Vector(C._wrap_new_Float32Vector__SWIG_2_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewFloat32Vector(a ...interface{}) Float32Vector {
	argc := len(a)
	if argc == 0 {
		return NewFloat32Vector__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewFloat32Vector__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewFloat32Vector__SWIG_2(a[0].(Float32Vector))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrFloat32Vector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Float32Vector_size_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat32Vector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Float32Vector_capacity_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat32Vector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Float32Vector_reserve_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_type_8(_swig_i_1))
}

func (arg1 SwigcptrFloat32Vector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Float32Vector_isEmpty_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat32Vector) Clear() {
	_swig_i_0 := arg1
	C._wrap_Float32Vector_clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrFloat32Vector) Add(arg2 float32) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Float32Vector_add_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.float(_swig_i_1))
}

func (arg1 SwigcptrFloat32Vector) Get(arg2 int) (_swig_ret float32) {
	var swig_r float32
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (float32)(C._wrap_Float32Vector_get_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrFloat32Vector) Set(arg2 int, arg3 float32) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_Float32Vector_set_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.float(_swig_i_2))
}

func DeleteFloat32Vector(arg1 Float32Vector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Float32Vector_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type Float32Vector interface {
	Swigcptr() uintptr
	SwigIsFloat32Vector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 float32)
	Get(arg2 int) (_swig_ret float32)
	Set(arg2 int, arg3 float32)
}

type SwigcptrFloat64Vector uintptr

func (p SwigcptrFloat64Vector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrFloat64Vector) SwigIsFloat64Vector() {
}

func NewFloat64Vector__SWIG_0() (_swig_ret Float64Vector) {
	var swig_r Float64Vector
	swig_r = (Float64Vector)(SwigcptrFloat64Vector(C._wrap_new_Float64Vector__SWIG_0_linear_solver_300787661ba17a28()))
	return swig_r
}

func NewFloat64Vector__SWIG_1(arg1 int64) (_swig_ret Float64Vector) {
	var swig_r Float64Vector
	_swig_i_0 := arg1
	swig_r = (Float64Vector)(SwigcptrFloat64Vector(C._wrap_new_Float64Vector__SWIG_1_linear_solver_300787661ba17a28(C.swig_type_9(_swig_i_0))))
	return swig_r
}

func NewFloat64Vector__SWIG_2(arg1 Float64Vector) (_swig_ret Float64Vector) {
	var swig_r Float64Vector
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (Float64Vector)(SwigcptrFloat64Vector(C._wrap_new_Float64Vector__SWIG_2_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewFloat64Vector(a ...interface{}) Float64Vector {
	argc := len(a)
	if argc == 0 {
		return NewFloat64Vector__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewFloat64Vector__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewFloat64Vector__SWIG_2(a[0].(Float64Vector))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrFloat64Vector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Float64Vector_size_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat64Vector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Float64Vector_capacity_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat64Vector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Float64Vector_reserve_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_type_12(_swig_i_1))
}

func (arg1 SwigcptrFloat64Vector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Float64Vector_isEmpty_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrFloat64Vector) Clear() {
	_swig_i_0 := arg1
	C._wrap_Float64Vector_clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrFloat64Vector) Add(arg2 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Float64Vector_add_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1))
}

func (arg1 SwigcptrFloat64Vector) Get(arg2 int) (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (float64)(C._wrap_Float64Vector_get_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrFloat64Vector) Set(arg2 int, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_Float64Vector_set_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.double(_swig_i_2))
}

func DeleteFloat64Vector(arg1 Float64Vector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Float64Vector_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type Float64Vector interface {
	Swigcptr() uintptr
	SwigIsFloat64Vector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 float64)
	Get(arg2 int) (_swig_ret float64)
	Set(arg2 int, arg3 float64)
}

type SwigcptrStringVector uintptr

func (p SwigcptrStringVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringVector) SwigIsStringVector() {
}

func NewStringVector__SWIG_0() (_swig_ret StringVector) {
	var swig_r StringVector
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_0_linear_solver_300787661ba17a28()))
	return swig_r
}

func NewStringVector__SWIG_1(arg1 int64) (_swig_ret StringVector) {
	var swig_r StringVector
	_swig_i_0 := arg1
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_1_linear_solver_300787661ba17a28(C.swig_type_13(_swig_i_0))))
	return swig_r
}

func NewStringVector__SWIG_2(arg1 StringVector) (_swig_ret StringVector) {
	var swig_r StringVector
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_2_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewStringVector(a ...interface{}) StringVector {
	argc := len(a)
	if argc == 0 {
		return NewStringVector__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewStringVector__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewStringVector__SWIG_2(a[0].(StringVector))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrStringVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_size_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_capacity_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_reserve_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_type_16(_swig_i_1))
}

func (arg1 SwigcptrStringVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_StringVector_isEmpty_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_StringVector_clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrStringVector) Add(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_add_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_17)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStringVector) Get(arg2 int) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r_p := C._wrap_StringVector_get_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func (arg1 SwigcptrStringVector) Set(arg2 int, arg3 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_StringVector_set_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_19)(unsafe.Pointer(&_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
}

func DeleteStringVector(arg1 StringVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_StringVector_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type StringVector interface {
	Swigcptr() uintptr
	SwigIsStringVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 string)
	Get(arg2 int) (_swig_ret string)
	Set(arg2 int, arg3 string)
}

type SwigcptrSolver uintptr

func (p SwigcptrSolver) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSolver) SwigIsSolver() {
}

type Operations_researchMPSolverOptimizationProblemType int

func _swig_getSolver_CLP_LINEAR_PROGRAMMING_Solver() (_swig_ret Operations_researchMPSolverOptimizationProblemType) {
	var swig_r Operations_researchMPSolverOptimizationProblemType
	swig_r = (Operations_researchMPSolverOptimizationProblemType)(C._wrap_CLP_LINEAR_PROGRAMMING_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverCLP_LINEAR_PROGRAMMING Operations_researchMPSolverOptimizationProblemType = _swig_getSolver_CLP_LINEAR_PROGRAMMING_Solver()

func _swig_getSolver_GLOP_LINEAR_PROGRAMMING_Solver() (_swig_ret Operations_researchMPSolverOptimizationProblemType) {
	var swig_r Operations_researchMPSolverOptimizationProblemType
	swig_r = (Operations_researchMPSolverOptimizationProblemType)(C._wrap_GLOP_LINEAR_PROGRAMMING_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverGLOP_LINEAR_PROGRAMMING Operations_researchMPSolverOptimizationProblemType = _swig_getSolver_GLOP_LINEAR_PROGRAMMING_Solver()

func _swig_getSolver_CBC_MIXED_INTEGER_PROGRAMMING_Solver() (_swig_ret Operations_researchMPSolverOptimizationProblemType) {
	var swig_r Operations_researchMPSolverOptimizationProblemType
	swig_r = (Operations_researchMPSolverOptimizationProblemType)(C._wrap_CBC_MIXED_INTEGER_PROGRAMMING_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverCBC_MIXED_INTEGER_PROGRAMMING Operations_researchMPSolverOptimizationProblemType = _swig_getSolver_CBC_MIXED_INTEGER_PROGRAMMING_Solver()

func _swig_getSolver_BOP_INTEGER_PROGRAMMING_Solver() (_swig_ret Operations_researchMPSolverOptimizationProblemType) {
	var swig_r Operations_researchMPSolverOptimizationProblemType
	swig_r = (Operations_researchMPSolverOptimizationProblemType)(C._wrap_BOP_INTEGER_PROGRAMMING_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverBOP_INTEGER_PROGRAMMING Operations_researchMPSolverOptimizationProblemType = _swig_getSolver_BOP_INTEGER_PROGRAMMING_Solver()

func NewSolver(arg1 string, arg2 Operations_researchMPSolverOptimizationProblemType) (_swig_ret Solver) {
	var swig_r Solver
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Solver)(SwigcptrSolver(C._wrap_new_Solver_linear_solver_300787661ba17a28(*(*C.swig_type_20)(unsafe.Pointer(&_swig_i_0)), C.swig_intgo(_swig_i_1))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func DeleteSolver(arg1 Solver) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Solver_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func SolverSupportsProblemType(arg1 Operations_researchMPSolverOptimizationProblemType) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Solver_SupportsProblemType_linear_solver_300787661ba17a28(C.swig_intgo(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Clear() {
	_swig_i_0 := arg1
	C._wrap_Solver_Clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrSolver) NumVariables() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Solver_NumVariables_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Variables() (_swig_ret Std_vector_Sl_operations_research_MPVariable_Sm__Sg_) {
	var swig_r Std_vector_Sl_operations_research_MPVariable_Sm__Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_operations_research_MPVariable_Sm__Sg_)(SwigcptrStd_vector_Sl_operations_research_MPVariable_Sm__Sg_(C._wrap_Solver_variables_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrSolver) LookupVariable(arg2 string) (_swig_ret Variable) {
	var swig_r Variable
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Variable)(SwigcptrVariable(C._wrap_Solver_LookupVariable_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_21)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrSolver) Var(arg2 float64, arg3 float64, arg4 bool, arg5 string) (_swig_ret Variable) {
	var swig_r Variable
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (Variable)(SwigcptrVariable(C._wrap_Solver_Var_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2), C._Bool(_swig_i_3), *(*C.swig_type_22)(unsafe.Pointer(&_swig_i_4)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func (arg1 SwigcptrSolver) NumVar(arg2 float64, arg3 float64, arg4 string) (_swig_ret Variable) {
	var swig_r Variable
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (Variable)(SwigcptrVariable(C._wrap_Solver_NumVar_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2), *(*C.swig_type_23)(unsafe.Pointer(&_swig_i_3)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func (arg1 SwigcptrSolver) IntVar(arg2 float64, arg3 float64, arg4 string) (_swig_ret Variable) {
	var swig_r Variable
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (Variable)(SwigcptrVariable(C._wrap_Solver_IntVar_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2), *(*C.swig_type_24)(unsafe.Pointer(&_swig_i_3)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func (arg1 SwigcptrSolver) BoolVar(arg2 string) (_swig_ret Variable) {
	var swig_r Variable
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Variable)(SwigcptrVariable(C._wrap_Solver_BoolVar_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_25)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrSolver) NumConstraints() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Solver_NumConstraints_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Constraints() (_swig_ret Std_vector_Sl_operations_research_MPConstraint_Sm__Sg_) {
	var swig_r Std_vector_Sl_operations_research_MPConstraint_Sm__Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_operations_research_MPConstraint_Sm__Sg_)(SwigcptrStd_vector_Sl_operations_research_MPConstraint_Sm__Sg_(C._wrap_Solver_constraints_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrSolver) LookupConstraint(arg2 string) (_swig_ret Constraint) {
	var swig_r Constraint
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Constraint)(SwigcptrConstraint(C._wrap_Solver_LookupConstraint_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_26)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrSolver) Constraint__SWIG_0(arg2 float64, arg3 float64) (_swig_ret Constraint) {
	var swig_r Constraint
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (Constraint)(SwigcptrConstraint(C._wrap_Solver_Constraint__SWIG_0_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2))))
	return swig_r
}

func (arg1 SwigcptrSolver) Constraint__SWIG_1() (_swig_ret Constraint) {
	var swig_r Constraint
	_swig_i_0 := arg1
	swig_r = (Constraint)(SwigcptrConstraint(C._wrap_Solver_Constraint__SWIG_1_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrSolver) Constraint__SWIG_2(arg2 float64, arg3 float64, arg4 string) (_swig_ret Constraint) {
	var swig_r Constraint
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (Constraint)(SwigcptrConstraint(C._wrap_Solver_Constraint__SWIG_2_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2), *(*C.swig_type_27)(unsafe.Pointer(&_swig_i_3)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func (arg1 SwigcptrSolver) Constraint__SWIG_3(arg2 string) (_swig_ret Constraint) {
	var swig_r Constraint
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Constraint)(SwigcptrConstraint(C._wrap_Solver_Constraint__SWIG_3_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_28)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (p SwigcptrSolver) Constraint(a ...interface{}) Constraint {
	argc := len(a)
	if argc == 0 {
		return p.Constraint__SWIG_1()
	}
	if argc == 1 {
		return p.Constraint__SWIG_3(a[0].(string))
	}
	if argc == 2 {
		return p.Constraint__SWIG_0(a[0].(float64), a[1].(float64))
	}
	if argc == 3 {
		return p.Constraint__SWIG_2(a[0].(float64), a[1].(float64), a[2].(string))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrSolver) Objective() (_swig_ret Objective) {
	var swig_r Objective
	_swig_i_0 := arg1
	swig_r = (Objective)(SwigcptrObjective(C._wrap_Solver_Objective_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

type Operations_researchMPSolverResultStatus int

func _swig_getSolver_OPTIMAL_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_OPTIMAL_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverOPTIMAL Operations_researchMPSolverResultStatus = _swig_getSolver_OPTIMAL_Solver()

func _swig_getSolver_FEASIBLE_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_FEASIBLE_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverFEASIBLE Operations_researchMPSolverResultStatus = _swig_getSolver_FEASIBLE_Solver()

func _swig_getSolver_INFEASIBLE_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_INFEASIBLE_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverINFEASIBLE Operations_researchMPSolverResultStatus = _swig_getSolver_INFEASIBLE_Solver()

func _swig_getSolver_UNBOUNDED_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_UNBOUNDED_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverUNBOUNDED Operations_researchMPSolverResultStatus = _swig_getSolver_UNBOUNDED_Solver()

func _swig_getSolver_ABNORMAL_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_ABNORMAL_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverABNORMAL Operations_researchMPSolverResultStatus = _swig_getSolver_ABNORMAL_Solver()

func _swig_getSolver_NOT_SOLVED_Solver() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_NOT_SOLVED_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverNOT_SOLVED Operations_researchMPSolverResultStatus = _swig_getSolver_NOT_SOLVED_Solver()

func (arg1 SwigcptrSolver) Solve__SWIG_0() (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_Solver_Solve__SWIG_0_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Solve__SWIG_1(arg2 MPSolverParameters) (_swig_ret Operations_researchMPSolverResultStatus) {
	var swig_r Operations_researchMPSolverResultStatus
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (Operations_researchMPSolverResultStatus)(C._wrap_Solver_Solve__SWIG_1_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func (p SwigcptrSolver) Solve(a ...interface{}) Operations_researchMPSolverResultStatus {
	argc := len(a)
	if argc == 0 {
		return p.Solve__SWIG_0()
	}
	if argc == 1 {
		return p.Solve__SWIG_1(a[0].(MPSolverParameters))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrSolver) ComputeConstraintActivities() (_swig_ret Float64Vector) {
	var swig_r Float64Vector
	_swig_i_0 := arg1
	swig_r = (Float64Vector)(SwigcptrFloat64Vector(C._wrap_Solver_ComputeConstraintActivities_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrSolver) VerifySolution(arg2 float64, arg3 bool) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (bool)(C._wrap_Solver_VerifySolution_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C._Bool(_swig_i_2)))
	return swig_r
}

func (arg1 SwigcptrSolver) InterruptSolve() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Solver_InterruptSolve_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) FillSolutionResponseProto(arg2 Operations_research_MPSolutionResponse) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_Solver_FillSolutionResponseProto_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func SolverSolveWithProto(arg1 Operations_research_MPModelRequest, arg2 Operations_research_MPSolutionResponse) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_Solver_SolveWithProto_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrSolver) ExportModelToProto(arg2 Operations_research_MPModelProto) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_Solver_ExportModelToProto_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrSolver) LoadSolutionFromProto__SWIG_0(arg2 Operations_research_MPSolutionResponse, arg3 float64) (_swig_ret Util_Status) {
	var swig_r Util_Status
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	swig_r = (Util_Status)(SwigcptrUtil_Status(C._wrap_Solver_LoadSolutionFromProto__SWIG_0_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.double(_swig_i_2))))
	return swig_r
}

func (arg1 SwigcptrSolver) LoadSolutionFromProto__SWIG_1(arg2 Operations_research_MPSolutionResponse) (_swig_ret Util_Status) {
	var swig_r Util_Status
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (Util_Status)(SwigcptrUtil_Status(C._wrap_Solver_LoadSolutionFromProto__SWIG_1_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func (p SwigcptrSolver) LoadSolutionFromProto(a ...interface{}) Util_Status {
	argc := len(a)
	if argc == 1 {
		return p.LoadSolutionFromProto__SWIG_1(a[0].(Operations_research_MPSolutionResponse))
	}
	if argc == 2 {
		return p.LoadSolutionFromProto__SWIG_0(a[0].(Operations_research_MPSolutionResponse), a[1].(float64))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrSolver) SetSolverSpecificParametersAsString(arg2 string) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (bool)(C._wrap_Solver_SetSolverSpecificParametersAsString_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), *(*C.swig_type_29)(unsafe.Pointer(&_swig_i_1))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

type Operations_researchMPSolverBasisStatus int

func _swig_getSolver_FREE_Solver() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_FREE_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverFREE Operations_researchMPSolverBasisStatus = _swig_getSolver_FREE_Solver()

func _swig_getSolver_AT_LOWER_BOUND_Solver() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_AT_LOWER_BOUND_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverAT_LOWER_BOUND Operations_researchMPSolverBasisStatus = _swig_getSolver_AT_LOWER_BOUND_Solver()

func _swig_getSolver_AT_UPPER_BOUND_Solver() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_AT_UPPER_BOUND_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverAT_UPPER_BOUND Operations_researchMPSolverBasisStatus = _swig_getSolver_AT_UPPER_BOUND_Solver()

func _swig_getSolver_FIXED_VALUE_Solver() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_FIXED_VALUE_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverFIXED_VALUE Operations_researchMPSolverBasisStatus = _swig_getSolver_FIXED_VALUE_Solver()

func _swig_getSolver_BASIC_Solver() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_BASIC_Solver_linear_solver_300787661ba17a28())
	return swig_r
}

var SolverBASIC Operations_researchMPSolverBasisStatus = _swig_getSolver_BASIC_Solver()

func SolverInfinity() (_swig_ret float64) {
	var swig_r float64
	swig_r = (float64)(C._wrap_Solver_infinity_linear_solver_300787661ba17a28())
	return swig_r
}

func (arg1 SwigcptrSolver) EnableOutput() {
	_swig_i_0 := arg1
	C._wrap_Solver_EnableOutput_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrSolver) SuppressOutput() {
	_swig_i_0 := arg1
	C._wrap_Solver_SuppressOutput_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrSolver) Iterations() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Solver_iterations_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Nodes() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Solver_nodes_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) ComputeExactConditionNumber() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Solver_ComputeExactConditionNumber_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) NextSolution() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Solver_NextSolution_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrSolver) Set_time_limit(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Solver_set_time_limit_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_type_32(_swig_i_1))
}

func (arg1 SwigcptrSolver) Wall_time() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_Solver_wall_time_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

type Solver interface {
	Swigcptr() uintptr
	SwigIsSolver()
	Clear()
	NumVariables() (_swig_ret int)
	Variables() (_swig_ret Std_vector_Sl_operations_research_MPVariable_Sm__Sg_)
	LookupVariable(arg2 string) (_swig_ret Variable)
	Var(arg2 float64, arg3 float64, arg4 bool, arg5 string) (_swig_ret Variable)
	NumVar(arg2 float64, arg3 float64, arg4 string) (_swig_ret Variable)
	IntVar(arg2 float64, arg3 float64, arg4 string) (_swig_ret Variable)
	BoolVar(arg2 string) (_swig_ret Variable)
	NumConstraints() (_swig_ret int)
	Constraints() (_swig_ret Std_vector_Sl_operations_research_MPConstraint_Sm__Sg_)
	LookupConstraint(arg2 string) (_swig_ret Constraint)
	Constraint(a ...interface{}) Constraint
	Objective() (_swig_ret Objective)
	Solve(a ...interface{}) Operations_researchMPSolverResultStatus
	ComputeConstraintActivities() (_swig_ret Float64Vector)
	VerifySolution(arg2 float64, arg3 bool) (_swig_ret bool)
	InterruptSolve() (_swig_ret bool)
	FillSolutionResponseProto(arg2 Operations_research_MPSolutionResponse)
	ExportModelToProto(arg2 Operations_research_MPModelProto)
	LoadSolutionFromProto(a ...interface{}) Util_Status
	SetSolverSpecificParametersAsString(arg2 string) (_swig_ret bool)
	EnableOutput()
	SuppressOutput()
	Iterations() (_swig_ret int64)
	Nodes() (_swig_ret int64)
	ComputeExactConditionNumber() (_swig_ret float64)
	NextSolution() (_swig_ret bool)
	Set_time_limit(arg2 int64)
	Wall_time() (_swig_ret int64)
}

type SwigcptrObjective uintptr

func (p SwigcptrObjective) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrObjective) SwigIsObjective() {
}

func (arg1 SwigcptrObjective) Clear() {
	_swig_i_0 := arg1
	C._wrap_Objective_Clear_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrObjective) SetCoefficient(arg2 Variable, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	C._wrap_Objective_SetCoefficient_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.double(_swig_i_2))
}

func (arg1 SwigcptrObjective) GetCoefficient(arg2 Variable) (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (float64)(C._wrap_Objective_GetCoefficient_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrObjective) SetOffset(arg2 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Objective_SetOffset_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1))
}

func (arg1 SwigcptrObjective) Offset() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Objective_offset_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrObjective) SetOptimizationDirection(arg2 bool) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Objective_SetOptimizationDirection_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C._Bool(_swig_i_1))
}

func (arg1 SwigcptrObjective) SetMinimization() {
	_swig_i_0 := arg1
	C._wrap_Objective_SetMinimization_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrObjective) SetMaximization() {
	_swig_i_0 := arg1
	C._wrap_Objective_SetMaximization_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrObjective) Maximization() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Objective_maximization_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrObjective) Minimization() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Objective_minimization_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrObjective) Value() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Objective_Value_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrObjective) BestBound() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Objective_BestBound_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func DeleteObjective(arg1 Objective) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Objective_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type Objective interface {
	Swigcptr() uintptr
	SwigIsObjective()
	Clear()
	SetCoefficient(arg2 Variable, arg3 float64)
	GetCoefficient(arg2 Variable) (_swig_ret float64)
	SetOffset(arg2 float64)
	Offset() (_swig_ret float64)
	SetOptimizationDirection(arg2 bool)
	SetMinimization()
	SetMaximization()
	Maximization() (_swig_ret bool)
	Minimization() (_swig_ret bool)
	Value() (_swig_ret float64)
	BestBound() (_swig_ret float64)
}

type SwigcptrVariable uintptr

func (p SwigcptrVariable) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVariable) SwigIsVariable() {
}

func (arg1 SwigcptrVariable) Name() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_Variable_name_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func (arg1 SwigcptrVariable) Integer() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Variable_integer_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) Solution_value() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Variable_solution_value_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) Index() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Variable_index_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) Lb() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Variable_lb_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) Ub() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Variable_ub_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) SetBounds(arg2 float64, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_Variable_SetBounds_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2))
}

func (arg1 SwigcptrVariable) Reduced_cost() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Variable_reduced_cost_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVariable) Basis_status() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_Variable_basis_status_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func DeleteVariable(arg1 Variable) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Variable_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type Variable interface {
	Swigcptr() uintptr
	SwigIsVariable()
	Name() (_swig_ret string)
	Integer() (_swig_ret bool)
	Solution_value() (_swig_ret float64)
	Index() (_swig_ret int)
	Lb() (_swig_ret float64)
	Ub() (_swig_ret float64)
	SetBounds(arg2 float64, arg3 float64)
	Reduced_cost() (_swig_ret float64)
	Basis_status() (_swig_ret Operations_researchMPSolverBasisStatus)
}

type SwigcptrConstraint uintptr

func (p SwigcptrConstraint) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrConstraint) SwigIsConstraint() {
}

func (arg1 SwigcptrConstraint) Name() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_Constraint_name_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func (arg1 SwigcptrConstraint) SetCoefficient(arg2 Variable, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	C._wrap_Constraint_SetCoefficient_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.double(_swig_i_2))
}

func (arg1 SwigcptrConstraint) GetCoefficient(arg2 Variable) (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (float64)(C._wrap_Constraint_GetCoefficient_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrConstraint) Lb() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Constraint_lb_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrConstraint) Ub() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Constraint_ub_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrConstraint) SetBounds(arg2 float64, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_Constraint_SetBounds_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.double(_swig_i_1), C.double(_swig_i_2))
}

func (arg1 SwigcptrConstraint) Set_is_lazy(arg2 bool) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_Constraint_set_is_lazy_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C._Bool(_swig_i_1))
}

func (arg1 SwigcptrConstraint) Index() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_Constraint_index_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrConstraint) Dual_value() (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	swig_r = (float64)(C._wrap_Constraint_dual_value_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrConstraint) Basis_status() (_swig_ret Operations_researchMPSolverBasisStatus) {
	var swig_r Operations_researchMPSolverBasisStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchMPSolverBasisStatus)(C._wrap_Constraint_basis_status_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func DeleteConstraint(arg1 Constraint) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Constraint_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type Constraint interface {
	Swigcptr() uintptr
	SwigIsConstraint()
	Name() (_swig_ret string)
	SetCoefficient(arg2 Variable, arg3 float64)
	GetCoefficient(arg2 Variable) (_swig_ret float64)
	Lb() (_swig_ret float64)
	Ub() (_swig_ret float64)
	SetBounds(arg2 float64, arg3 float64)
	Set_is_lazy(arg2 bool)
	Index() (_swig_ret int)
	Dual_value() (_swig_ret float64)
	Basis_status() (_swig_ret Operations_researchMPSolverBasisStatus)
}

type SwigcptrMPSolverParameters uintptr

func (p SwigcptrMPSolverParameters) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMPSolverParameters) SwigIsMPSolverParameters() {
}

type Operations_researchMPSolverParametersDoubleParam int

func _swig_getMPSolverParameters_RELATIVE_MIP_GAP_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersDoubleParam) {
	var swig_r Operations_researchMPSolverParametersDoubleParam
	swig_r = (Operations_researchMPSolverParametersDoubleParam)(C._wrap_RELATIVE_MIP_GAP_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersRELATIVE_MIP_GAP Operations_researchMPSolverParametersDoubleParam = _swig_getMPSolverParameters_RELATIVE_MIP_GAP_MPSolverParameters()

func _swig_getMPSolverParameters_PRIMAL_TOLERANCE_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersDoubleParam) {
	var swig_r Operations_researchMPSolverParametersDoubleParam
	swig_r = (Operations_researchMPSolverParametersDoubleParam)(C._wrap_PRIMAL_TOLERANCE_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersPRIMAL_TOLERANCE Operations_researchMPSolverParametersDoubleParam = _swig_getMPSolverParameters_PRIMAL_TOLERANCE_MPSolverParameters()

func _swig_getMPSolverParameters_DUAL_TOLERANCE_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersDoubleParam) {
	var swig_r Operations_researchMPSolverParametersDoubleParam
	swig_r = (Operations_researchMPSolverParametersDoubleParam)(C._wrap_DUAL_TOLERANCE_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersDUAL_TOLERANCE Operations_researchMPSolverParametersDoubleParam = _swig_getMPSolverParameters_DUAL_TOLERANCE_MPSolverParameters()

type Operations_researchMPSolverParametersIntegerParam int

func _swig_getMPSolverParameters_PRESOLVE_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIntegerParam) {
	var swig_r Operations_researchMPSolverParametersIntegerParam
	swig_r = (Operations_researchMPSolverParametersIntegerParam)(C._wrap_PRESOLVE_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersPRESOLVE Operations_researchMPSolverParametersIntegerParam = _swig_getMPSolverParameters_PRESOLVE_MPSolverParameters()

func _swig_getMPSolverParameters_LP_ALGORITHM_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIntegerParam) {
	var swig_r Operations_researchMPSolverParametersIntegerParam
	swig_r = (Operations_researchMPSolverParametersIntegerParam)(C._wrap_LP_ALGORITHM_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersLP_ALGORITHM Operations_researchMPSolverParametersIntegerParam = _swig_getMPSolverParameters_LP_ALGORITHM_MPSolverParameters()

func _swig_getMPSolverParameters_INCREMENTALITY_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIntegerParam) {
	var swig_r Operations_researchMPSolverParametersIntegerParam
	swig_r = (Operations_researchMPSolverParametersIntegerParam)(C._wrap_INCREMENTALITY_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersINCREMENTALITY Operations_researchMPSolverParametersIntegerParam = _swig_getMPSolverParameters_INCREMENTALITY_MPSolverParameters()

func _swig_getMPSolverParameters_SCALING_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIntegerParam) {
	var swig_r Operations_researchMPSolverParametersIntegerParam
	swig_r = (Operations_researchMPSolverParametersIntegerParam)(C._wrap_SCALING_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersSCALING Operations_researchMPSolverParametersIntegerParam = _swig_getMPSolverParameters_SCALING_MPSolverParameters()

type Operations_researchMPSolverParametersPresolveValues int

func _swig_getMPSolverParameters_PRESOLVE_OFF_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersPresolveValues) {
	var swig_r Operations_researchMPSolverParametersPresolveValues
	swig_r = (Operations_researchMPSolverParametersPresolveValues)(C._wrap_PRESOLVE_OFF_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersPRESOLVE_OFF Operations_researchMPSolverParametersPresolveValues = _swig_getMPSolverParameters_PRESOLVE_OFF_MPSolverParameters()

func _swig_getMPSolverParameters_PRESOLVE_ON_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersPresolveValues) {
	var swig_r Operations_researchMPSolverParametersPresolveValues
	swig_r = (Operations_researchMPSolverParametersPresolveValues)(C._wrap_PRESOLVE_ON_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersPRESOLVE_ON Operations_researchMPSolverParametersPresolveValues = _swig_getMPSolverParameters_PRESOLVE_ON_MPSolverParameters()

type Operations_researchMPSolverParametersLpAlgorithmValues int

func _swig_getMPSolverParameters_DUAL_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersLpAlgorithmValues) {
	var swig_r Operations_researchMPSolverParametersLpAlgorithmValues
	swig_r = (Operations_researchMPSolverParametersLpAlgorithmValues)(C._wrap_DUAL_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersDUAL Operations_researchMPSolverParametersLpAlgorithmValues = _swig_getMPSolverParameters_DUAL_MPSolverParameters()

func _swig_getMPSolverParameters_PRIMAL_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersLpAlgorithmValues) {
	var swig_r Operations_researchMPSolverParametersLpAlgorithmValues
	swig_r = (Operations_researchMPSolverParametersLpAlgorithmValues)(C._wrap_PRIMAL_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersPRIMAL Operations_researchMPSolverParametersLpAlgorithmValues = _swig_getMPSolverParameters_PRIMAL_MPSolverParameters()

func _swig_getMPSolverParameters_BARRIER_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersLpAlgorithmValues) {
	var swig_r Operations_researchMPSolverParametersLpAlgorithmValues
	swig_r = (Operations_researchMPSolverParametersLpAlgorithmValues)(C._wrap_BARRIER_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersBARRIER Operations_researchMPSolverParametersLpAlgorithmValues = _swig_getMPSolverParameters_BARRIER_MPSolverParameters()

type Operations_researchMPSolverParametersIncrementalityValues int

func _swig_getMPSolverParameters_INCREMENTALITY_OFF_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIncrementalityValues) {
	var swig_r Operations_researchMPSolverParametersIncrementalityValues
	swig_r = (Operations_researchMPSolverParametersIncrementalityValues)(C._wrap_INCREMENTALITY_OFF_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersINCREMENTALITY_OFF Operations_researchMPSolverParametersIncrementalityValues = _swig_getMPSolverParameters_INCREMENTALITY_OFF_MPSolverParameters()

func _swig_getMPSolverParameters_INCREMENTALITY_ON_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersIncrementalityValues) {
	var swig_r Operations_researchMPSolverParametersIncrementalityValues
	swig_r = (Operations_researchMPSolverParametersIncrementalityValues)(C._wrap_INCREMENTALITY_ON_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersINCREMENTALITY_ON Operations_researchMPSolverParametersIncrementalityValues = _swig_getMPSolverParameters_INCREMENTALITY_ON_MPSolverParameters()

type Operations_researchMPSolverParametersScalingValues int

func _swig_getMPSolverParameters_SCALING_OFF_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersScalingValues) {
	var swig_r Operations_researchMPSolverParametersScalingValues
	swig_r = (Operations_researchMPSolverParametersScalingValues)(C._wrap_SCALING_OFF_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersSCALING_OFF Operations_researchMPSolverParametersScalingValues = _swig_getMPSolverParameters_SCALING_OFF_MPSolverParameters()

func _swig_getMPSolverParameters_SCALING_ON_MPSolverParameters() (_swig_ret Operations_researchMPSolverParametersScalingValues) {
	var swig_r Operations_researchMPSolverParametersScalingValues
	swig_r = (Operations_researchMPSolverParametersScalingValues)(C._wrap_SCALING_ON_MPSolverParameters_linear_solver_300787661ba17a28())
	return swig_r
}

var MPSolverParametersSCALING_ON Operations_researchMPSolverParametersScalingValues = _swig_getMPSolverParameters_SCALING_ON_MPSolverParameters()

func GetMPSolverParametersKDefaultRelativeMipGap() (_swig_ret float64) {
	var swig_r float64
	swig_r = (float64)(C._wrap_MPSolverParameters_kDefaultRelativeMipGap_get_linear_solver_300787661ba17a28())
	return swig_r
}

func GetMPSolverParametersKDefaultPrimalTolerance() (_swig_ret float64) {
	var swig_r float64
	swig_r = (float64)(C._wrap_MPSolverParameters_kDefaultPrimalTolerance_get_linear_solver_300787661ba17a28())
	return swig_r
}

func GetMPSolverParametersKDefaultDualTolerance() (_swig_ret float64) {
	var swig_r float64
	swig_r = (float64)(C._wrap_MPSolverParameters_kDefaultDualTolerance_get_linear_solver_300787661ba17a28())
	return swig_r
}

func GetMPSolverParametersKDefaultPresolve() (_swig_ret Operations_researchMPSolverParametersPresolveValues) {
	var swig_r Operations_researchMPSolverParametersPresolveValues
	swig_r = (Operations_researchMPSolverParametersPresolveValues)(C._wrap_MPSolverParameters_kDefaultPresolve_get_linear_solver_300787661ba17a28())
	return swig_r
}

func GetMPSolverParametersKDefaultIncrementality() (_swig_ret Operations_researchMPSolverParametersIncrementalityValues) {
	var swig_r Operations_researchMPSolverParametersIncrementalityValues
	swig_r = (Operations_researchMPSolverParametersIncrementalityValues)(C._wrap_MPSolverParameters_kDefaultIncrementality_get_linear_solver_300787661ba17a28())
	return swig_r
}

func NewMPSolverParameters() (_swig_ret MPSolverParameters) {
	var swig_r MPSolverParameters
	swig_r = (MPSolverParameters)(SwigcptrMPSolverParameters(C._wrap_new_MPSolverParameters_linear_solver_300787661ba17a28()))
	return swig_r
}

func (arg1 SwigcptrMPSolverParameters) SetDoubleParam(arg2 Operations_researchMPSolverParametersDoubleParam, arg3 float64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_MPSolverParameters_SetDoubleParam_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.double(_swig_i_2))
}

func (arg1 SwigcptrMPSolverParameters) SetIntegerParam(arg2 Operations_researchMPSolverParametersIntegerParam, arg3 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_MPSolverParameters_SetIntegerParam_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2))
}

func (arg1 SwigcptrMPSolverParameters) GetDoubleParam(arg2 Operations_researchMPSolverParametersDoubleParam) (_swig_ret float64) {
	var swig_r float64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (float64)(C._wrap_MPSolverParameters_GetDoubleParam_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMPSolverParameters) GetIntegerParam(arg2 Operations_researchMPSolverParametersIntegerParam) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_MPSolverParameters_GetIntegerParam_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func DeleteMPSolverParameters(arg1 MPSolverParameters) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_MPSolverParameters_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type MPSolverParameters interface {
	Swigcptr() uintptr
	SwigIsMPSolverParameters()
	SetDoubleParam(arg2 Operations_researchMPSolverParametersDoubleParam, arg3 float64)
	SetIntegerParam(arg2 Operations_researchMPSolverParametersIntegerParam, arg3 int)
	GetDoubleParam(arg2 Operations_researchMPSolverParametersDoubleParam) (_swig_ret float64)
	GetIntegerParam(arg2 Operations_researchMPSolverParametersIntegerParam) (_swig_ret int)
}

type SwigcptrModelExportOptions uintptr

func (p SwigcptrModelExportOptions) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrModelExportOptions) SwigIsModelExportOptions() {
}

func NewModelExportOptions() (_swig_ret ModelExportOptions) {
	var swig_r ModelExportOptions
	swig_r = (ModelExportOptions)(SwigcptrModelExportOptions(C._wrap_new_ModelExportOptions_linear_solver_300787661ba17a28()))
	return swig_r
}

func DeleteModelExportOptions(arg1 ModelExportOptions) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_ModelExportOptions_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
}

type ModelExportOptions interface {
	Swigcptr() uintptr
	SwigIsModelExportOptions()
}

func ExportModelAsLpFormat__SWIG_0(arg1 Operations_research_MPModelProto, arg2 ModelExportOptions) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r_p := C._wrap_ExportModelAsLpFormat__SWIG_0_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func ExportModelAsLpFormat__SWIG_1(arg1 Operations_research_MPModelProto) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	swig_r_p := C._wrap_ExportModelAsLpFormat__SWIG_1_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func ExportModelAsLpFormat(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		return ExportModelAsLpFormat__SWIG_1(a[0].(Operations_research_MPModelProto))
	}
	if argc == 2 {
		return ExportModelAsLpFormat__SWIG_0(a[0].(Operations_research_MPModelProto), a[1].(ModelExportOptions))
	}
	panic("No match for overloaded function call")
}

func ExportModelAsMpsFormat__SWIG_0(arg1 Operations_research_MPModelProto, arg2 ModelExportOptions) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r_p := C._wrap_ExportModelAsMpsFormat__SWIG_0_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func ExportModelAsMpsFormat__SWIG_1(arg1 Operations_research_MPModelProto) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	swig_r_p := C._wrap_ExportModelAsMpsFormat__SWIG_1_linear_solver_300787661ba17a28(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func ExportModelAsMpsFormat(a ...interface{}) string {
	argc := len(a)
	if argc == 1 {
		return ExportModelAsMpsFormat__SWIG_1(a[0].(Operations_research_MPModelProto))
	}
	if argc == 2 {
		return ExportModelAsMpsFormat__SWIG_0(a[0].(Operations_research_MPModelProto), a[1].(ModelExportOptions))
	}
	panic("No match for overloaded function call")
}

type SwigcptrStd_vector_Sl_operations_research_MPConstraint_Sm__Sg_ uintptr
type Std_vector_Sl_operations_research_MPConstraint_Sm__Sg_ interface {
	Swigcptr() uintptr
}

func (p SwigcptrStd_vector_Sl_operations_research_MPConstraint_Sm__Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrOperations_research_MPModelProto uintptr
type Operations_research_MPModelProto interface {
	Swigcptr() uintptr
}

func (p SwigcptrOperations_research_MPModelProto) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUtil_Status uintptr
type Util_Status interface {
	Swigcptr() uintptr
}

func (p SwigcptrUtil_Status) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrStd_vector_Sl_operations_research_MPVariable_Sm__Sg_ uintptr
type Std_vector_Sl_operations_research_MPVariable_Sm__Sg_ interface {
	Swigcptr() uintptr
}

func (p SwigcptrStd_vector_Sl_operations_research_MPVariable_Sm__Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrOperations_research_MPSolutionResponse uintptr
type Operations_research_MPSolutionResponse interface {
	Swigcptr() uintptr
}

func (p SwigcptrOperations_research_MPSolutionResponse) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrOperations_research_MPModelRequest uintptr
type Operations_research_MPModelRequest interface {
	Swigcptr() uintptr
}

func (p SwigcptrOperations_research_MPModelRequest) Swigcptr() uintptr {
	return uintptr(p)
}
